[{"path":"index.html","id":"preface","chapter":"1 Preface","heading":"1 Preface","text":"friendly book work data start finish. intended easy reading beginner aware R vocabulary, Information Technology. ’m Data Analyst. got job mostly Master’s Math good references (people speak qualities). first year working, made many mistakes many headaches. constantly Google’d solutions problems faced working. allowed get work done teach best way work avoid future headaches.\nMistakes headaches can great learning challenges, case data analysis (especially use R), can demotivating. Mistakes code cause errors, mistakes approach cause messy files, messy files require messy code mistakes.Please remember R code taught Statistics courses almost always focused teaching us generally handle data; focused teaching us Statistics. Statistics reputation hard, especially learning subject required --mathematical university program. R two completely different reputations. Among students Statistics courses, usually hated. use tool work, usually loved. course, may due fact students pay learn R, workers paid learn R. reason two different reputations. workers realize, use R day--day, amazing community workers help . help work currently needed done, help work smart beautiful way nothing like work needed university Statistics courses. Note professor teaching university Statistics probably uses R Statistics. person learning R outside university uses R Data. Data Statistics! Statistics specific mathematics used data; work-flow, project-management, coding get data data reports ready. things Statistics , R beautifully . Hence people pick R work university professors, end passionate R teaching others R.","code":""},{"path":"writing-reports.html","id":"writing-reports","chapter":"2 Writing Reports","heading":"2 Writing Reports","text":"Data work involve preparation data data reports. fact, may want report preparation data. Since code prepares report can also prepare data, work way gets job done reports getting done. ’s win-win!Reports great client-facing examples work (work report data preparation). employment, can presented potential employers. employment, can presented collaborators data preparation; maybe decisions need made data, best way show decisions needed report.reasons, book starts fundamentals writing reports. files make reports called .Rmd files. start .Rmd file, open RStudio. top menu, click File New File finally “R Markdown…”. see pop-, name file like. , file, select (shortcut Cmd-Cntrl-) hit delete. Knit (.e. prepare) document shortcut Cmd-Shift-K (Cntrl-Shift-K). see document empty. lines. Let’s get started writing lines !","code":""},{"path":"writing-reports.html","id":"lines-and-lists","chapter":"2 Writing Reports","heading":"2.1 Lines and Lists","text":"left Rstudio (called code source), numbers like represent lines text code:list text can made first skipping line, starting next line numbers followed period (.) followed space, using hyphen (-) followed space:Lines 1 5 show document :textStart list–create list within list, indent twice using -. Hit tab indent.Lines 1 5 show document :textStart list\nList within list\nList within list–list broken empty line subsequent line indented twice.Lines 1 7 show document :textStart list\nList within list\nList within listThis line breaks list\n- line indented twice code source","code":"1   Some text\n2\n3\n4\n51   Some text\n2\n3   1. Start of my list\n4\n51   Some text\n2\n3   1. Start of my list\n4           - List within my list\n51   Some text\n2\n3   1. Start of my list\n4           - List within my list\n5\n6   This line breaks the list\n7           - Some line indented twice in my code source"},{"path":"writing-reports.html","id":"code","chapter":"2 Writing Reports","heading":"2.2 Code","text":"Code written lines like text. examplewill work. Code declared one two ways.","code":"1   some_code\n2   \n3"},{"path":"writing-reports.html","id":"declaring-with-single-back-ticks","chapter":"2 Writing Reports","heading":"2.2.1 Declaring With Single Back-Ticks","text":"can insert code document using single back-tick (` symbol) :R code needs r first back-tick:example, date can added line document usingLines 1 3 show document :text. know today’s date 2022-10-25?–","code":"1   Some text and `some_code` to be processed.\n2   `some_more_code` and some more text.\n3   `some_lonely_code`1   Some text and `r some_code` to be processed.\n2   `r some_more_code` and some more text.\n3   `r some_lonely_code`1   Some text. Did you know today's date is `r Sys.Date()`?\n2\n3"},{"path":"writing-reports.html","id":"declaring-with-multiple-back-ticks","chapter":"2 Writing Reports","heading":"2.2.2 Declaring With Multiple Back-Ticks","text":"can insert multiple lines code document using multiple back-ticks :```{r} starts R code chunk ``` ends chunk.primary purpose code chunk contain multiple lines code. get error preparing document try declare single back-ticks like :Instead must write :following result chunk document:declaring code chunks (multiple back-ticks), document show code result code can customized. declaring code single back-ticks, document show result code customized.Since back-ticks take effort write, shortcut writing empty code chunk: command-Shift-Mac ctrl-Shift-Windows.","code":"10    ```{r}\n11    some_code\n12    some_more_code\n14    ```10    `r  \n11  \n12    Sys.Date()\n13\n14    Sys.Date()\n15\n16    `10    ```{r}\n11    Sys.Date()\n12    Sys.Date()\n13    ```\nSys.Date()>> [1] \"2022-10-25\"\nSys.Date()>> [1] \"2022-10-25\""},{"path":"writing-reports.html","id":"summary","chapter":"2 Writing Reports","heading":"2.2.3 Summary","text":"summarize, compared declaring code single back-ticks,Chunks can contain multiple lines.Chunks can show code result code. great showing work explaining code readers. flexible property lets decide whether chunk shows code result, one two, neither.","code":""},{"path":"writing-reports.html","id":"errors","chapter":"2 Writing Reports","heading":"2.3 Errors","text":"code written correctly, errors probably frustration follow. R errors known friendly; kind enough tell wrong way easy understand. error, see red text within Console, box bottom left quarter RStudio (default layout). Console code processed result printed.symbols need know understand Console:first learning R, best way understand errors usually R’s error message. best way paying close attention code every little detail: misspelling, capitalization, punctuation.reason want practice good strategies writing code. Writing involves naming objects functions. , also name files using good strategy. quick guide naming files, click .","code":"> means the line of code processed\n+ means a line of code continuing from the last line\n[1] means the first element of the result of the processed code\n[n] means the n'th element of the result of the processed code\n[[1]]\n[1] means the first element in the first container of the result of the processed code"},{"path":"writing-reports.html","id":"links","chapter":"2 Writing Reports","heading":"2.4 Links","text":"add clickable link sends user website, place website address within inequality symbols < … >. example: <http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf> gives us\nhttp://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdfTo make hyperlink, , shorter, clickable link, write clickable text (text want reader see) square brackets website address round brackets like [text-seen--reader](link). exampleLines 1 3 show :File Naming Presentation Jenny Bryan","code":"1   [File Naming Presentation by Jenny Bryan](http://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf)\n2\n3"},{"path":"writing-reports.html","id":"keyboard-shortcuts","chapter":"2 Writing Reports","heading":"2.5 Keyboard Shortcuts","text":"Remember, using Windows, usectrl instead commandalt instead optionShortcuts:command-Z: Undo (go back)command-shift-Z: Redo (go forward)command-Enter: Process line code | blinking (consistently appearing disappearing)command-option-C: Process current chunkoption-shift-arrow_key: Highlight direction arrow….","code":""},{"path":"file-naming.html","id":"file-naming","chapter":"3 File Naming","heading":"3 File Naming","text":"Now covered write lines, can start writing lines data! Actually one small subject discuss . Preface said,“Messy files require messy code can lead errors.”Let’s best make sure files messy.Please note information useful even one file data. point, multiple files, may want organized folder. Data can always updated, time may original file well new file updated data.Definitions:_ called underscore.- called dash.","code":""},{"path":"file-naming.html","id":"consistency","chapter":"3 File Naming","heading":"3.1 Consistency","text":"Use _ separator, , separate different characteristics file. Use - separate parts within characteristics. example,related files want systematically process, systematic order characteristics. example,Consider files look ordered alphabetically operating system’s file manager (File Explorer Window’s Finder Mac) important . files ordered like :order characteristics start general, alphabetic ordering appropriate:","code":"lesson-1_on-rmd_2022-02-18.rmdlesson-1_on-rmd_2022-02-18.rmd\nlesson-2_on-rmd_2022-02-19.rmd\nlesson-3_on-rmd_2022-02-20.rmd\nlesson-1_on-python_2022-02-20.rmdlesson-1_on-rmd_2022-02-18.rmd\nlesson-1_on-ruby_2022-02-20.rmd\nlesson-2_on-rmd_2022-02-19.rmd\nlesson-3_on-rmd_2022-02-20.rmdon-rmd_lesson-1_2022-02-18.rmd\non-rmd_lesson-2_2022-02-19.rmd\non-rmd_lesson-3_2022-02-20.rmd\non-ruby_lesson-1_2022-02-20.rmd"},{"path":"file-naming.html","id":"why-consistency-matters","chapter":"3 File Naming","heading":"3.2 Why Consistency Matters","text":"Consistency helps visually process files see file explorer. also helps telling computer process files. named files using separators numeric information can represented. , phrase first _ first characteristic, phrase second _ second characteristic .process file names way splits characteristics, can use function str_split R package called stringr. File names strings. Strings character elements directly treated numerically (need converted numeric elements first ).use function package, first install package runningDelete line done, need rerun (re-process) .use colon (symbol :) twice use function package. writeyou see drop-menu functions stringr. str stands string. Many function names start str_. drop-menu writing stringr:: adjusts add str_. every function whose name starts str_, general purpose processing strings. Similar file names , general part name comes first, _, specific purpose.exceptions; functions stringr start str_. start str_ str_ makes clear function process. important can avoid need write stringr::. avoid loading package: making function names package available. load package, run followingNow write str_, still get drop-menu.","code":"\ninstall.packages(\"stringr\")stringr::\nlibrary(stringr)"},{"path":"file-naming.html","id":"finding-and-organizing-our-files","chapter":"3 File Naming","heading":"3.3 Finding and Organizing Our Files","text":"use str_ function, need strings. Let’s get consistent file names R. use function called file.choose. function causes pop-allows interactively search computer files. using Windows, pop-may unfortunately pop-behind RStudio. need Alt-Tab find pop-. see pop-, find folder files double click () one files. function print file path (computer’s representation file exists). assign file path object file_path.now use function path_dir package fs. path_dir get path directory file path. assign result object directory_path.get list .csv files directory, use list.files function. function called two arguments. first path folder contains files. second pattern unique files want.Now use str_split split strings. example,result called list. list can contain anything. [[1]] [[2]] represent first second element list. [1] indicates element right first element.also separate file type (.rmd) end, preceded period, can adjust function separate _ well ..happened? want, . special (.e. meta) character. Special characters mean R literal symbol . special character . represents character. Hence told str_split use _. separator meant _A used first separator, _2 second separator. need use different special characters overcome challenge: [ ]. square brackets can used surround distinct characters str_split use separators: [_.] tell str_split use either _ literal . separator.can cleaner result using str_split_fixed. called “fixed” can fix number splits pieces. split strings 4 pieces.result called matrix. Let’s assign object m.Now can see matrix just processingLet’s add informative names columns matrix. , use function called colnames. function placed left <- replacement function. replace null (.e. undefined) column names matrix list characteristics.Let’s create object named df function called as_tibble package tibble. tibble? R word table. Remember install tibble runningWe now need file path files. list files directory, use function dir_ls. Assign result object file_path.now change tibble new column called file_path contains file_paths. , use function package dplyr (pronounced “data plier”). function use named another word change: mutate. function two arguments. first tibble. second name new column, equal sign, values want column.","code":"\nfile_path <- file.choose()\nlibrary(fs)\ndirectory_path <- path_dir(file_path)\nfiles <- list.files(directory_path, pattern = \"csv\")\nfiles>> [1] \"gapminder_afganistan_2022-02-21.csv\" \n>> [2] \"gapminder_afghanistan_2022-02-21.csv\"\n>> [3] \"gapminder_canada_2022-02-21.csv\"\nstr_split(files, \"_\")>> [[1]]\n>> [1] \"gapminder\"      \"afganistan\"     \"2022-02-21.csv\"\n>> \n>> [[2]]\n>> [1] \"gapminder\"      \"afghanistan\"    \"2022-02-21.csv\"\n>> \n>> [[3]]\n>> [1] \"gapminder\"      \"canada\"         \"2022-02-21.csv\"\nstr_split(files, \"_.\")>> [[1]]\n>> [1] \"gapminder\"     \"fganistan\"     \"022-02-21.csv\"\n>> \n>> [[2]]\n>> [1] \"gapminder\"     \"fghanistan\"    \"022-02-21.csv\"\n>> \n>> [[3]]\n>> [1] \"gapminder\"     \"anada\"         \"022-02-21.csv\"\nstr_split(files, \"[_.]\")>> [[1]]\n>> [1] \"gapminder\"  \"afganistan\" \"2022-02-21\" \"csv\"       \n>> \n>> [[2]]\n>> [1] \"gapminder\"   \"afghanistan\" \"2022-02-21\"  \"csv\"        \n>> \n>> [[3]]\n>> [1] \"gapminder\"  \"canada\"     \"2022-02-21\" \"csv\"\nstr_split_fixed(files, \"[_.]\", 4)>>      [,1]        [,2]          [,3]         [,4] \n>> [1,] \"gapminder\" \"afganistan\"  \"2022-02-21\" \"csv\"\n>> [2,] \"gapminder\" \"afghanistan\" \"2022-02-21\" \"csv\"\n>> [3,] \"gapminder\" \"canada\"      \"2022-02-21\" \"csv\"\nm <- str_split_fixed(files, \"[_.]\", 4)\nm>>      [,1]        [,2]          [,3]         [,4] \n>> [1,] \"gapminder\" \"afganistan\"  \"2022-02-21\" \"csv\"\n>> [2,] \"gapminder\" \"afghanistan\" \"2022-02-21\" \"csv\"\n>> [3,] \"gapminder\" \"canada\"      \"2022-02-21\" \"csv\"\ncolnames(m) <- c(\"source\", \"country\", \"date\", \"file_type\")\nm>>      source      country       date         file_type\n>> [1,] \"gapminder\" \"afganistan\"  \"2022-02-21\" \"csv\"    \n>> [2,] \"gapminder\" \"afghanistan\" \"2022-02-21\" \"csv\"    \n>> [3,] \"gapminder\" \"canada\"      \"2022-02-21\" \"csv\"\nlibrary(tibble)\ndf <- as_tibble(m)\ndf>> # A tibble: 3 × 4\n>>   source    country     date       file_type\n>>   <chr>     <chr>       <chr>      <chr>    \n>> 1 gapminder afganistan  2022-02-21 csv      \n>> 2 gapminder afghanistan 2022-02-21 csv      \n>> 3 gapminder canada      2022-02-21 csv\nfile_paths <- dir_ls(directory_path)\nlibrary(dplyr)\ndf <- mutate(df, file_path = file_paths)"},{"path":"file-naming.html","id":"reading-in-data","chapter":"3 File Naming","heading":"3.3.1 Reading in Data","text":"can read data related file help file_path column. , can read data organized inside tibble. row tibble, add file’s data hidden little box “nest”. nests go column called data.change tibble new column, use mutate. first argument tibble, just like . second name new column (data), equal sign, values want column.Since values column data sets, need put data sets containers. see \"csv\" 3 times file_type tibble, see \"<S3: spec_tbl_df>\" 3 times data. < > mean container. S3: spec_tbl_df means data frame (another word data set).need use special function inside mutate creating data column values data column containers. special function called map package purrr. purrr pronounced like cat’s purr (low vibrating sound happiness) refers purposeful programming R.result map always containers. number containers always length first argument map. second argument map function applied first argument. create data column, first argument file_path, second argument custom read function.read function read_csv_c uses function called read_csv package readr. read_csv reads .csv files determines kind columns data (e.g. numeric character). decide kind columns , need prevent function . col_types argument inside read_csv .default. need set .default \"c\". \"c\" stands character. Character safe default original format .csv data.Now use new function read data.longer need file_path column select removed using select function.","code":"\nlibrary(readr)\n\nread_csv_c <- function(csv_file_path) read_csv(csv_file_path, col_types = c(.default = \"c\"))\ndf <- mutate(df, data = map(file_path, read_csv_c))\ndf>> # A tibble: 3 × 6\n>>   source    country     date       file_type file_path      data         \n>>   <chr>     <chr>       <chr>      <chr>     <fs::path>     <named list> \n>> 1 gapminder afganistan  2022-02-21 csv       …022-02-21.csv <spec_tbl_df>\n>> 2 gapminder afghanistan 2022-02-21 csv       …022-02-21.csv <spec_tbl_df>\n>> 3 gapminder canada      2022-02-21 csv       …022-02-21.csv <spec_tbl_df>\ndf <- select(df, - file_path)"},{"path":"opening-the-data.html","id":"opening-the-data","chapter":"4 Opening the Data","heading":"4 Opening the Data","text":"can open containers “nests” data using function unnest package tidyr.data looks clean looks can deceiving. Remember set df object as_tibble? tibble table R, cleaner kind table. shows 10 rows, many columns can comfortably displayed. sizing table surrounds data, like header (top line) # tibble: 24 x 9 tells many rows (24) columns (9) . footer (bottom line) # ... 14 rows 6 variables tells missing display.Even though data small (24 rows 9 columns can evaluated using eyes), always best practice techniques generalizable small large data.","code":"\nlibrary(tidyr)\ndf <- unnest(df, data)\ndf>> # A tibble: 24 × 9\n>>    source    country    date  file_…¹ conti…² year  lifeExp pop   gdpPe…³\n>>    <chr>     <chr>      <chr> <chr>   <chr>   <chr> <chr>   <chr> <chr>  \n>>  1 gapminder afghanist… 2022… csv     Asia    1952  28.801  8425… 779.44…\n>>  2 gapminder afghanist… 2022… csv     Asia    1957  30.332  9240… 820.85…\n>>  3 gapminder afghanist… 2022… csv     Asia    1962  31.997  1026… 853.10…\n>>  4 gapminder afghanist… 2022… csv     Asia    1967  34.02   1153… 836.19…\n>>  5 gapminder afghanist… 2022… csv     Asia    1972  36.088  1307… 739.98…\n>>  6 gapminder afghanist… 2022… csv     Asia    1977  38.438  1488… 786.11…\n>>  7 gapminder afghanist… 2022… csv     Asia    1982  39.854  1288… 978.01…\n>>  8 gapminder afghanist… 2022… csv     Asia    1987  40.822  1386… 852.39…\n>>  9 gapminder afghanist… 2022… csv     Asia    1992  41.674  1631… 649.34…\n>> 10 gapminder afghanist… 2022… csv     Asia    1997  41.763  2222… 635.34…\n>> # … with 14 more rows, and abbreviated variable names ¹​file_type,\n>> #   ²​continent, ³​gdpPercap"},{"path":"opening-the-data.html","id":"checking-data","chapter":"4 Opening the Data","heading":"4.1 Checking Data","text":"simplest way start evaluating data check values column meet expectations. Since created first 4 columns using file names, can sure 4 columns clean.next column, continent, expect values continents, capitalized, spelled correctly. Instead reading line eyes, can read line computers. combination two. exactly start. check unique (.e. distinct) values continent column using distinct. produces tibble distinct rows column(s) choose.unique values perfect. means every value perfect, unique values represent . capitalized, example? fact case country column: values capitalized values came file-naming, good practice capitalize file-naming. capitalize values column, can use function called str_to_title.","code":"\ndistinct(df, continent)>> # A tibble: 2 × 1\n>>   continent\n>>   <chr>    \n>> 1 Asia     \n>> 2 Americas\nstr_to_title(df$country)>>  [1] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n>>  [5] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n>>  [9] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\"\n>> [13] \"Canada\"      \"Canada\"      \"Canada\"      \"Canada\"     \n>> [17] \"Canada\"      \"Canada\"      \"Canada\"      \"Canada\"     \n>> [21] \"Canada\"      \"Canada\"      \"Canada\"      \"Canada\"\ndf>> # A tibble: 24 × 9\n>>    source    country    date  file_…¹ conti…² year  lifeExp pop   gdpPe…³\n>>    <chr>     <chr>      <chr> <chr>   <chr>   <chr> <chr>   <chr> <chr>  \n>>  1 gapminder afghanist… 2022… csv     Asia    1952  28.801  8425… 779.44…\n>>  2 gapminder afghanist… 2022… csv     Asia    1957  30.332  9240… 820.85…\n>>  3 gapminder afghanist… 2022… csv     Asia    1962  31.997  1026… 853.10…\n>>  4 gapminder afghanist… 2022… csv     Asia    1967  34.02   1153… 836.19…\n>>  5 gapminder afghanist… 2022… csv     Asia    1972  36.088  1307… 739.98…\n>>  6 gapminder afghanist… 2022… csv     Asia    1977  38.438  1488… 786.11…\n>>  7 gapminder afghanist… 2022… csv     Asia    1982  39.854  1288… 978.01…\n>>  8 gapminder afghanist… 2022… csv     Asia    1987  40.822  1386… 852.39…\n>>  9 gapminder afghanist… 2022… csv     Asia    1992  41.674  1631… 649.34…\n>> 10 gapminder afghanist… 2022… csv     Asia    1997  41.763  2222… 635.34…\n>> # … with 14 more rows, and abbreviated variable names ¹​file_type,\n>> #   ²​continent, ³​gdpPercap"},{"path":"opening-the-data.html","id":"finding-functions","chapter":"4 Opening the Data","heading":"4.2 Finding Functions","text":"know function use tell ?","code":""},{"path":"opening-the-data.html","id":"google","chapter":"4 Opening the Data","heading":"4.2.1 Google","text":"Google great search engine R programmers use learning R language. search “r capitalize first letter” see, 2022-10-25, following paragraph first result:Convert First letter every word Uppercase R Programming – str_to_title() Function. str_to_title() Function R Language used convert first letter every word string Uppercase rest letters converted lower case.trick , within Google, always write r question desired command, like capitalize first letter simply capitalize first letter.simple example. time can difficult write English want. come time practice. first may find Google search results nothing need. sign re-word search, , ’ve already re-worded search, may sign dedicated function need, different approach needed. ’s rare dedicated function long goal simple. may find effective break ’re simple steps, search steps, opposed Googling something long complicated, involving many steps.","code":""},{"path":"opening-the-data.html","id":"stack-overflow","chapter":"4 Opening the Data","heading":"4.2.2 Stack Overflow","text":"Speaking breaking something complicated search engine like Google can understand , also necessary others understand . learning R, allowing others understand challenge need valuable R community willing, also quickly able help. R users mainly help Stack Overflow. website easily allows users ask answer questions code, code formatted (look nice), receive feedback.main draw Stack Overflow person asking question one main responsibility, produce called minimally reproducible example: example can used (reproduced) someone else seeing question, unnecessary detail irrelevant question (minimal).Describe exampleEXAMPLE HEREKnowing make example majority work involved asking question Stack Overflow.","code":""},{"path":"opening-the-data.html","id":"creating-minimally-reproducible-examples","chapter":"4 Opening the Data","heading":"4.2.2.1 Creating Minimally Reproducible Examples","text":"question involves data frames, need learn build data frame asking question Stack Overflow. build data frame, can use tibble function package tibble.2 numeric columns, like inthen first part minimal example might look :’re trying achieve isthen second part minimal example might look like :summarize, entire question Stack Overflow look like :make question even better, can format code using reprex function reprex package. curly brackets needed tell reprex multiple lines code.Finally question looks friendly:","code":">> # A tibble: 12 × 2\n>>    year  lifeExp\n>>    <chr> <chr>  \n>>  1 1952  28.801 \n>>  2 1957  30.332 \n>>  3 1962  31.997 \n>>  4 1967  34.02  \n>>  5 1972  36.088 \n>>  6 1977  38.438 \n>>  7 1952  68.75  \n>>  8 1957  69.96  \n>>  9 1962  71.3   \n>> 10 1967  72.13  \n>> 11 1972  72.88  \n>> 12 1977  74.21\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))>> # A tibble: 4 × 2\n>>       x     y\n>>   <dbl> <dbl>\n>> 1     1     3\n>> 2     2     4\n>> 3     1     2\n>> 4     2     2>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA\n\n>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA\n\n>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA\n\n>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA\n\n>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA\n\n>> Warning in mean.default(lifeExp): argument is not numeric or logical:\n>> returning NA>> # A tibble: 6 × 2\n>>   year  mean_lifeExp\n>>   <chr>        <dbl>\n>> 1 1952            NA\n>> 2 1957            NA\n>> 3 1962            NA\n>> 4 1967            NA\n>> 5 1972            NA\n>> 6 1977            NA\ntibble(x = c(1, 2), mean_y = c(2.5, 2))>> # A tibble: 2 × 2\n>>       x mean_y\n>>   <dbl>  <dbl>\n>> 1     1    2.5\n>> 2     2    2How can I transform the first tibble into the second tibble with a function?\nlibrary(tibble)\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\ntibble(x = c(1, 2), mean_y = c(2.5, 2))\nlibrary(reprex)\nreprex(\n  {\n    library(tibble)\n    tibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\n    tibble(x = c(1, 2), mean_y = c(2.5, 2))\n  }\n)>> ℹ Non-interactive session, setting `html_preview = FALSE`.>> ℹ Rendering reprex...>> ✔ Reprex output is on the clipboard.How can I transform the first tibble into the second tibble with a function?\nlibrary(tibble)\ntibble(x = c(1, 2, 1, 2), y = c(3, 4, 2, 2))\n#> # A tibble: 4 × 2\n#>       x     y\n#>   <dbl> <dbl>\n#> 1     1     3\n#> 2     2     4\n#> 3     1     2\n#> 4     2     2\ntibble(x = c(1, 2), mean_y = c(2.5, 2))\n#> # A tibble: 2 × 2\n#>       x mean_y\n#>   <dbl>  <dbl>\n#> 1     1    2.5\n#> 2     2    2"},{"path":"opening-the-data.html","id":"finding-function-documentation-for-understanding-functions","chapter":"4 Opening the Data","heading":"4.3 Finding Function Documentation for Understanding Functions","text":"’ve found function (usually, set functions) recommended Google’s search results, R users Stack Overflow, wise understand function(s) work; specifically, inputs outputs.Google Stack Overflow can overwhelming. Google gives variety websites. choose? question Stack Overflow can receive multiple answers, using different approaches functions. , choose?Let’s start Google .","code":""},{"path":"opening-the-data.html","id":"google-1","chapter":"4 Opening the Data","heading":"4.3.1 Google","text":"Remember, searching “r capitalize first letter” saw following paragraph first result:Convert First letter every word Uppercase R Programming – str_to_title() Function. str_to_title() Function R Language used convert first letter every word string Uppercase rest letters converted lower case.paragraph website called GeeksforGeeksI recommend use website. , searching “r capitalize first letter” seeing paragraph, recommend visit website understand function. multiple reasons.familiar format website.find multiple websites need discover learn multiple functions.navigate formats websites.Many things can get way reading instructions, like pop-ups sign website’s email list, advertisements completely unrelated products (everything need learn R FREE), recommended articles distract .effective use single, standardized resource learning functions. Thankfully, R .reading paragraph learning function need may str_to_title(), can now Google search “r str_to_title” instead “r capitalize first letter”. , Google shows multiple websites, looking one standardized. tidyverse.org one websites, click result “tidyverse.org” website address brings us page: https://stringr.tidyverse.org/reference/case.htmlAs standard, multiple sections webpage describing function: Usage, Arguments Examples. Usage shows format inputs function. input = beside default value. default value usually indicates users need change value.Usage str_to_title(string, locale = \"en\") tells us thatstring object containing string(s) string . default value; must provide one.locale default value \"en\".Arguments tell us inputs case Usage enough. first learning R, Arguments can overwhelming; might quickly find understanding words contained therein, continuously look definitions (function documentation) order understand.","code":""},{"path":"opening-the-data.html","id":"stack-overflow-1","chapter":"4 Opening the Data","heading":"4.3.2 Stack Overflow","text":"Another way understanding functions presented answers others Stack Overflow. answers don’t need answers questions posted Stack Overflow; can answers questions posted others.example, question dated 2019: https://stackoverflow.com/questions/58996293/transforming--dataframe--multiplying--columns-elements---names--thThere three separate answers votes (positive feedback represented digit top left answer): 1 using data.table package; 1 using base R (R without packages); 1 using tidyr.Notice answer using tidyr far simple; one line code. word tidy keeps popping , good reason: functions package broadly tidyverse (tidy universe) designed make coding short simple.possible add comments answers Stack Overflow, questions functions something don’t understand. Fortunately tidyverse functions well documented standardized webpages, multiple, free books using specific tasks.","code":""},{"path":"opening-the-data.html","id":"books","chapter":"4 Opening the Data","heading":"4.3.3 Books","text":"many books describing tidyverse functions. Finding good book strong alternative using Google Stack Overflow toward understanding functions. book can hold hand throughout step provide narrative. can also designed toward specific task, just one designed toward getting started quickly comfortably possible.","code":""},{"path":"understanding-tidyverse-functions.html","id":"understanding-tidyverse-functions","chapter":"5 Understanding Tidyverse Functions","heading":"5 Understanding Tidyverse Functions","text":"far used mutate dplyr, unnest tidyr, read_csv readr, map purrr, as_tibble tibble, str_to_title stringr. Since using many tidyverse packages, may well load tidyverse possible. Fortunately possible running library(tidyverse). , tidyverse functions now available us.","code":""},{"path":"understanding-tidyverse-functions.html","id":"mutate","chapter":"5 Understanding Tidyverse Functions","heading":"5.1 mutate","text":"already went mutate. function used create new columns overwrite existing columns.can overwrite existing column like :numeric year useful , example, want filter data years 1960 1980. done filter.","code":"\ndf <- mutate(df, year = as.numeric(year))\ndf <- filter(df, 1960 < year & year < 1980)"},{"path":"understanding-tidyverse-functions.html","id":"pumping-with","chapter":"5 Understanding Tidyverse Functions","heading":"5.2 Pumping with %>%","text":"Notice examples function documentation mutate (https://dplyr.tidyverse.org/reference/mutate.html) filter use symbol %>%.%>% simple. simply sends left side right side. property remember %>% holds mathematical priority brackets exponents. know BEDMASS, also know %>%DMASS.asButis asFor relevant example,aswhich ","code":"\nsqrt(5) >> [1] 2.236068\n5 %>% sqrt>> [1] 2.236068\n5 * 5 %>% sqrt>> [1] 11.18034\n(5 * 5) %>% sqrt>> [1] 5\ndf <- mutate(df, year = as.numeric(year))\ndf <- df %>% mutate(year = as.numeric(year))\ndf <- df %>% mutate(year = year %>% as.numeric)"},{"path":"understanding-tidyverse-functions.html","id":"grouping-with-group","chapter":"5 Understanding Tidyverse Functions","heading":"5.3 Grouping with group","text":"Notice examples function documentation filter (https://dplyr.tidyverse.org/reference/filter.html) use function group_by.group_by groups data function(s) follow group_by.Let us create simple example demonstrate… (continued)","code":""},{"path":"strings.html","id":"strings","chapter":"6 Strings","heading":"6 Strings","text":"","code":""},{"path":"strings.html","id":"patterns-and-regular-expressions-regexes","chapter":"6 Strings","heading":"6.1 Patterns and Regular Expressions (regexes)","text":"Short regular expressions, regex (pronounced reg-ex) language describing patterns strings.Like language, regex appear foreign difficult understand without constantly looking definitions symbols. good dictionary regex cheat sheet; search “Regular Expressions” https://www.rstudio.com/resources/cheatsheets/. important definitions left bottom boxes.learn language? need language describing patterns strings?","code":""},{"path":"strings.html","id":"motivation","chapter":"6 Strings","heading":"6.2 Motivation","text":"first definition heading “Character Classes” isThis tells us represent digits patterns, can write \"[[:digit:]]\" \"\\\\d\".need patterns? Let’s say want make sure row date column df exactly 8 digits: 4 year, 2 month 2 day. write 8 digits directly, need represent abstractly; responsibility patterns.pattern digits \"[[:digit:]]\" \"\\\\d\". Now need pattern “8 times”. also simply write 8, want avoid representing character 8. now look abstract pattern representing “times”: , words, “occurences”. bottom right, pattern grey heading “Quantifiers”.4th defintion isThis tells us match 8 times, can write \"{8}\".Combining learned digits, now write pattern digits 8 times: \"\\\\d{8}\".using pattern, let us try understand symbol. \\\\ needed make sure pattern character “d” . Similarly, { } needed make sure pattern number “8” .try use pattern filter dates 8 digits, get following0 rows date column digits exactly 8 times. can ?Looking back date column, see?date 4 digits, followed hyphen, followed 2 digits, followed hyphen, followed 2 digits. pattern simply represents 8 digits, one nothing .alter pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\", get expected result:Now checked row date 8 digits, theses digits separated hyphens XXXX-XX-XX format.still confirmed date column YYYY-MM-DD format (year-month-day format). unfortunately impossible cases. determine whether 02-04 February 4nd April 2nd unless know whether date entered MM-DD DD-MM. Fortunately can check cases day greater 12th. checking whether month YYYY-MM-DD 01 12.adjust pattern slightly month becomes reference. make reference pattern, surround part want reference round brackets: ( ).extract reference, must refer number. need use number, possible one reference group. use \\\\ make sure pattern number “1” .now use pattern replacement function str_replace:can treat numeric.check whether 12.every row data frame, create month column, treat numeric, filter values greater 12:rows month greater 12. Notice mutate separate line pump %>%. mutate can fit one line opposed less easily readable version .","code":"[[:digit:]] or \\\\d  Digits; [0-9]{n}  Matches exactly n times\ndf %>% filter(date %>% str_detect(\"\\\\d{8}\"))>> # A tibble: 0 × 5\n>> # … with 5 variables: source <chr>, country <chr>, date <chr>,\n>> #   file_type <chr>, data <named list>\ndf>> # A tibble: 3 × 5\n>>   source    country     date       file_type data                  \n>>   <chr>     <chr>       <chr>      <chr>     <named list>          \n>> 1 gapminder afganistan  2022-02-21 csv       <spec_tbl_df [0 × 5]> \n>> 2 gapminder afghanistan 2022-02-21 csv       <spec_tbl_df [12 × 5]>\n>> 3 gapminder canada      2022-02-21 csv       <spec_tbl_df [12 × 5]>\ndf %>% filter(date %>% str_detect(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\"))>> # A tibble: 3 × 5\n>>   source    country     date       file_type data                  \n>>   <chr>     <chr>       <chr>      <chr>     <named list>          \n>> 1 gapminder afganistan  2022-02-21 csv       <spec_tbl_df [0 × 5]> \n>> 2 gapminder afghanistan 2022-02-21 csv       <spec_tbl_df [12 × 5]>\n>> 3 gapminder canada      2022-02-21 csv       <spec_tbl_df [12 × 5]>\npattern <- \"\\\\d{4}-(\\\\d{2})-\\\\d{2}\"\nreplacement <- \"\\\\1\"\nmonth <- \"2022-13-01\" %>% str_replace(pattern, replacement)\nmonth>> [1] \"13\"\nmonth %>% as.numeric>> [1] 13\nmonth %>% as.numeric > 12>> [1] TRUE\ndf <- df %>% \n  mutate(month = date %>% str_replace(\"\\\\d{4}-(\\\\d{2})-\\\\d{2}\", \"\\\\1\") %>% as.numeric)\n\ndf %>% filter(month > 12)>> # A tibble: 0 × 6\n>> # … with 6 variables: source <chr>, country <chr>, date <chr>,\n>> #   file_type <chr>, data <named list>, month <dbl>\ndf <- df %>% mutate(month = date %>% str_replace(\"\\\\d{4}-(\\\\d{2})-\\\\d{2}\", \"\\\\1\") %>% as.numeric)"},{"path":"strings.html","id":"understanding-representations","chapter":"6 Strings","heading":"6.3 Understanding Representations","text":"data contains characters like quotes backslashes, R directly represent string. can try write directly string see happens.Quotes:R reads first two set quotes \"\" empty string, considers third set starting second, incomplete string.Backslash:backslash special behaviour, preventing second \" ending string.Solution:Since R represent quotes backslash directly, must instead represent indirectly special sequences characters. quotes, representative sequence R \\\". backslash, sequence \\\\.place sequences strings, output error., can see sequence represents using function writeLines:Sequences \\\" \\\\ start backslash backslash specific behaviour: prevents normal interpretation next character. backslash string\"\\\"\" prevents second quotes interpreted end string. string \"\\\\\", first backslash second backslash normally interpreted “preventing normal interpretation next character”. Yes likely re-read .\\\" \\\\ called special characters. Special characters called special hold special property: represent one thing (unique character represented directly). \\\" represents quotes, \\\\ represents backslash. Scan following list special characters represent.Notice one backslash except case \\\\. special characters represent one thing. Representations multiple things, however, multiple backslashes (two exact). example, \\\\d represents multiple things represents multiple digits 0 9.\\\\ strange case. special character representing one thing multiple backslashes. even stranger case used inside pattern. get error:error happen special characters used way. reason \\\\ already used patterns like \\\\d. pattern match string \"\\\\\" simply \"\\\\\", representations like \\\\d lose meaning. example, instead matching digits, \\\\d just match \\\\ followed d.match string \"\\\\\" must use pattern \"\\\\\\\\\". remember , consider R views four backslashes:","code":"\"\"\">> Error: <text>:1:3: unexpected INCOMPLETE_STRING\n>> 1: \"\"\"\n>>       ^\"\\\">> Error: <text>:1:1: unexpected INCOMPLETE_STRING\n>> 1: \"\\\"\n>>     ^\n\"\\\"\" >> [1] \"\\\"\"\n\"\\\\\">> [1] \"\\\\\"\n\"\\\"\" %>% writeLines>> \"\n\"\\\\\" %>% writeLines>> \\\npattern <- \"\\\\\"\n\"\\\\\" %>% str_detect(\"\\\\\")>> Error in stri_detect_regex(string, pattern, negate = negate, opts_regex = opts(pattern)): Unrecognized backslash escape sequence in pattern. (U_REGEX_BAD_ESCAPE_SEQUENCE, context=`\\`)\n\"\\\\\\\\\" %>% writeLines>> \\\\"},{"path":"avoiding-repetition.html","id":"avoiding-repetition","chapter":"7 Avoiding Repetition","heading":"7 Avoiding Repetition","text":"Let’s say need read data , named files per chapter File Naming. summarize, file names phrases words separated -, multiple phrases separated _.Instead copy-pasting code used previous time, can avoid repetition function. can create function assigning function() object, entering inputs inside () like :inputs function parts function change repeated use. Since want repeat code read data, without repetitive, function contain inputs repetitive. part reading data repetitive now want repeat task set different files.one, can imagine new set files might different number phrases file names. one input function can n_phrases. Two, can imagine phrases represent something different. Since named previously, let us call second input function names_phrases.Lastly, need name function. function name reflect main behaviour. hard identify main behaviour, probably best split function multiple functions. Naming functions appropriately important readability.Let us start listing behaviours function functions:Choose fileFind folder (directory) fileFind names csv files folderGet matrix splitting phrases nameName columns turn matrix tibbleFor row representing file, read respective data tibbleThat lot one name represent. Hence prudent separate behaviours multiple functions.CONTINUE HEREAlthough place code needed read data inside function name function read_csv_in_df, good idea. First, inconsistent popular function read_csv, two arguments, first file path.two arguments, function form function(n_phrases, names_phrases){code}. code execute curly brackets {}. Although curly brackets needed function(x, y) x + y, needed code multiple lines.Although place code needed read data inside name function read_csv_in_df, acting without much care.","code":"\nsum <- function(x, y) x + y\nsum(2, 2)>> [1] 4\nread_csv_in_df <- function(n_phrases, names_phrases){\n\n  one_file_path <- file.choose()\n  directory_path <- one_file_path %>% path_dir\n  file_names <- directory_path %>% list.files(pattern = \"csv\")\n  file_paths <- directory_path %>% dir_ls\n\n  split_matrix <- file_names %>% str_split_fixed(\"[._]\", n_phrases)\n  colnames(split_matrix) <- names_phrases\n\n  df <- split_matrix %>%\n    as_tibble %>%\n    mutate(data = map(file_paths, read_csv))\n\n  df\n\n}\n# read_csv_in_df\n# read_csv_in_df(4, c(\"source\", \"country\", \"date\" ,\"file_type\"))"},{"path":"next-steps-for-this-guide.html","id":"next-steps-for-this-guide","chapter":"8 Next Steps for This Guide","heading":"8 Next Steps for This Guide","text":"make work reproducible using “R projects”mask randomize data order ot make publicHow build websiteHow build tables (gt) plots (ggplot)","code":""}]
